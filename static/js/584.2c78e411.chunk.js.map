{"version":3,"file":"static/js/584.2c78e411.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/MovieList/MovieList.module.css?6db5","components/MovieList/MovieList.jsx","webpack://react-homework-template/./src/components/Searchbar/Searchbar.module.css?8d9e","components/Searchbar/Searchbar.jsx","webpack://react-homework-template/./src/pages/Movies/Movies.module.css?82ee","pages/Movies/Movies.jsx","services/API.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"movieList\":\"MovieList_movieList__uFrOZ\",\"movieListItem\":\"MovieList_movieListItem__6DqRG\",\"movieImage\":\"MovieList_movieImage__txbdB\",\"movieTitle\":\"MovieList_movieTitle__RhENm\",\"movieLink\":\"MovieList_movieLink__kzavH\"};","import PropTypes from 'prop-types';\nimport { Link, useLocation } from 'react-router-dom';\nimport placeholderImage from '../../images/placeholderImage.png';\nimport styles from './MovieList.module.css';\n\nconst MovieList = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <ul className={styles.movieList}>\n      {movies.map(({ title, id, poster_path }) => (\n        <li className={styles.movieListItem} key={id}>\n          <Link\n            className={styles.movieLink}\n            to={`/movies/${id}`}\n            state={{ from: location }}\n          >\n            {poster_path ? (\n              <img\n                className={styles.movieImage}\n                src={`https://image.tmdb.org/t/p/w500${poster_path}`}\n                alt={`Poster of ${title}`}\n              />\n            ) : (\n              <img\n                className={styles.movieImage}\n                src={placeholderImage}\n                alt={'Placeholder'}\n              />\n            )}\n            <p className={styles.movieTitle}>{title}</p>\n          </Link>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default MovieList;\n\nMovieList.propTypes = {\n  movies: PropTypes.array.isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"Searchbar_form__D-hp5\",\"wrapper\":\"Searchbar_wrapper__GBjqw\",\"input\":\"Searchbar_input__19umw\",\"button\":\"Searchbar_button__nkcjk\"};","import { nanoid } from 'nanoid';\nimport PropTypes from 'prop-types';\nimport styles from './Searchbar.module.css';\n\nconst Searchbar = ({ onSubmit }) => {\n  return (\n    <form className={styles.form} onSubmit={e => onSubmit(e)}>\n      <div className={styles.wrapper}>\n        <input\n          className={styles.input}\n          key={nanoid()}\n          type=\"text\"\n          name=\"query\"\n        />\n        <button className={styles.button} type=\"submit\">\n          Search\n        </button>\n      </div>\n    </form>\n  );\n};\n\nSearchbar.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default Searchbar;\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Movies_wrapper__RVmCE\"};","import MovieList from 'components/MovieList/MovieList';\nimport Searchbar from 'components/Searchbar/Searchbar';\nimport { useEffect, useState } from 'react';\nimport { Outlet, useParams, useSearchParams } from 'react-router-dom';\nimport { fetchMoviesByQuery } from 'services/API';\nimport styles from './Movies.module.css';\n\nconst Movies = () => {\n  const params = useParams();\n  const [searchedMovies, setSearchedMovies] = useState([]);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query') ?? '';\n\n  const onSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    const queryValue = form.elements.query.value;\n\n    if (queryValue === '') {\n      return setErrorMessage('The search field cannot be empty!');\n    }\n    setSearchParams({ query: queryValue });\n    setErrorMessage('');\n    form.reset();\n  };\n\n  useEffect(() => {\n    if (query) {\n      fetchMoviesByQuery(query, setSearchedMovies).catch(console.error);\n    }\n  }, [query]);\n\n  return (\n    <main className={styles.wrapper}>\n      {params.movieId ? (\n        <>\n          <Outlet />\n        </>\n      ) : (\n        <>\n          <Searchbar onSubmit={onSubmit} />\n          {errorMessage ? (\n            <div>{errorMessage}</div>\n          ) : (\n            <MovieList movies={searchedMovies} />\n          )}\n        </>\n      )}\n    </main>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\nconst API_KEY = 'ef7bbc65cde0a77a652ac5d100215648';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\nexport const fetchTrendingMovies = async setMovies => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}trending/movie/day?api_key=${API_KEY}`\n    );\n    return setMovies(response.data.results);\n  } catch (error) {\n    console.log(`${error.name}: ${error.message}`);\n  }\n};\n\nexport const fetchMoviesByQuery = async (query, setSearchedMovies) => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}search/movie?api_key=${API_KEY}&query=${query}&page=1&include_adult=true`\n    );\n    const data = response.data.results;\n    return setSearchedMovies(data);\n  } catch (error) {\n    console.log(`${error.name}: ${error.message}`);\n  }\n};\n\nexport const fetchMoviesById = async (movieId, setMovie) => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}movie/${movieId}?api_key=${API_KEY}`\n    );\n    return setMovie(response.data);\n  } catch (error) {\n    console.log(`${error.name}: ${error.message}`);\n  }\n};\n\nexport const fetchCast = async (movieId, setCast) => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}movie/${movieId}/credits?api_key=${API_KEY}`\n    );\n    return setCast(response.data.cast);\n  } catch (error) {\n    console.log(`${error.name}: ${error.message}`);\n  }\n};\n\nexport const fetchReviews = async (movieId, setReviews) => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}movie/${movieId}/reviews?api_key=${API_KEY}`\n    );\n    return setReviews(response.data.results);\n  } catch (error) {\n    console.log(`${error.name}: ${error.message}`);\n  }\n};\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["movies","location","useLocation","className","styles","map","title","id","poster_path","to","state","from","src","alt","placeholderImage","onSubmit","e","type","name","nanoid","params","useParams","useState","searchedMovies","setSearchedMovies","errorMessage","setErrorMessage","useSearchParams","searchParams","setSearchParams","query","get","useEffect","fetchMoviesByQuery","catch","console","error","movieId","preventDefault","form","currentTarget","queryValue","elements","value","reset","MovieList","API_KEY","BASE_URL","fetchTrendingMovies","setMovies","axios","response","data","results","log","message","fetchMoviesById","setMovie","fetchCast","setCast","cast","fetchReviews","setReviews","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}