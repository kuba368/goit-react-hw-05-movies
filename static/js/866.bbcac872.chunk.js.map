{"version":3,"file":"static/js/866.bbcac872.chunk.js","mappings":"oOACA,EAA2B,0B,SCiC3B,EA5BgB,WACd,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAMA,OAJAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAaN,EAASI,GAAYG,MAAMC,QAAQC,MACjD,GAAE,CAACT,KAGF,6BACGG,EAAQO,OAAS,GAChB,uBAAG,kCAEH,wBACGP,EAAQQ,KAAI,YAA0B,IAAvBC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACtB,OACE,gBAAIC,UAAWC,EAAf,WACE,0BAAI,WAASH,MACb,uBAAIC,OAF+BG,EAAAA,EAAAA,MAKxC,OAKV,C,8LC9BKC,EAAU,mCACVC,EAAW,gCAEJC,EAAmB,mCAAG,WAAMC,GAAN,gGAERC,EAAAA,EAAAA,IAAA,UAClBH,EADkB,sCACoBD,IAHZ,cAEzBK,EAFyB,yBAKxBF,EAAUE,EAASC,KAAKC,UALA,gCAO/BhB,QAAQiB,IAAR,UAAe,KAAMC,KAArB,aAA8B,KAAMC,UAPL,yDAAH,sDAWnBC,EAAkB,mCAAG,WAAOC,EAAOC,GAAd,kGAEPT,EAAAA,EAAAA,IAAA,UAClBH,EADkB,gCACcD,EADd,kBAC+BY,EAD/B,+BAFO,cAExBP,EAFwB,OAKxBC,EAAOD,EAASC,KAAKC,QALG,kBAMvBM,EAAkBP,IANK,gCAQ9Bf,QAAQiB,IAAR,UAAe,KAAMC,KAArB,aAA8B,KAAMC,UARN,yDAAH,wDAYlBI,EAAe,mCAAG,WAAO/B,EAASgC,GAAhB,gGAEJX,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iBACDlB,EADC,oBACkBiB,IAHd,cAErBK,EAFqB,yBAKpBU,EAASV,EAASC,OALE,gCAO3Bf,QAAQiB,IAAR,UAAe,KAAMC,KAArB,aAA8B,KAAMC,UAPT,yDAAH,wDAWfM,EAAS,mCAAG,WAAOjC,EAASkC,GAAhB,gGAEEb,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iBACDlB,EADC,4BAC0BiB,IAH5B,cAEfK,EAFe,yBAKdY,EAAQZ,EAASC,KAAKY,OALR,gCAOrB3B,QAAQiB,IAAR,UAAe,KAAMC,KAArB,aAA8B,KAAMC,UAPf,yDAAH,wDAWTrB,EAAY,mCAAG,WAAON,EAASI,GAAhB,gGAEDiB,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iBACDlB,EADC,4BAC0BiB,IAHzB,cAElBK,EAFkB,yBAKjBlB,EAAWkB,EAASC,KAAKC,UALR,gCAOxBhB,QAAQiB,IAAR,UAAe,KAAMC,KAArB,aAA8B,KAAMC,UAPZ,yDAAH,uD,uDCjDlB,IAkBIX,EAAS,eAACoB,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACC,EAAIC,GAWvD,OARED,IAFFC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["webpack://react-homework-template/./src/pages/Reviews/Reviews.module.css?9a3e","pages/Reviews/Reviews.jsx","services/API.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"listItem\":\"Reviews_listItem__grAS3\"};","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { fetchReviews } from 'services/API';\nimport { nanoid } from 'nanoid';\nimport styles from './Reviews.module.css';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    fetchReviews(movieId, setReviews).catch(console.error);\n  }, [movieId]);\n\n  return (\n    <section>\n      {reviews.length < 1 ? (\n        <p>Sorry, no reviews available.</p>\n      ) : (\n        <ul>\n          {reviews.map(({ author, content }) => {\n            return (\n              <li className={styles.listItem} key={nanoid()}>\n                <h4>Author: {author}</h4>\n                <p>{content}</p>\n              </li>\n            );\n          })}\n        </ul>\n      )}\n    </section>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\nconst API_KEY = 'ef7bbc65cde0a77a652ac5d100215648';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\nexport const fetchTrendingMovies = async setMovies => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}trending/movie/day?api_key=${API_KEY}`\n    );\n    return setMovies(response.data.results);\n  } catch (error) {\n    console.log(`${error.name}: ${error.message}`);\n  }\n};\n\nexport const fetchMoviesByQuery = async (query, setSearchedMovies) => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}search/movie?api_key=${API_KEY}&query=${query}&page=1&include_adult=true`\n    );\n    const data = response.data.results;\n    return setSearchedMovies(data);\n  } catch (error) {\n    console.log(`${error.name}: ${error.message}`);\n  }\n};\n\nexport const fetchMoviesById = async (movieId, setMovie) => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}movie/${movieId}?api_key=${API_KEY}`\n    );\n    return setMovie(response.data);\n  } catch (error) {\n    console.log(`${error.name}: ${error.message}`);\n  }\n};\n\nexport const fetchCast = async (movieId, setCast) => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}movie/${movieId}/credits?api_key=${API_KEY}`\n    );\n    return setCast(response.data.cast);\n  } catch (error) {\n    console.log(`${error.name}: ${error.message}`);\n  }\n};\n\nexport const fetchReviews = async (movieId, setReviews) => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}movie/${movieId}/reviews?api_key=${API_KEY}`\n    );\n    return setReviews(response.data.results);\n  } catch (error) {\n    console.log(`${error.name}: ${error.message}`);\n  }\n};\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["movieId","useParams","useState","reviews","setReviews","useEffect","fetchReviews","catch","console","error","length","map","author","content","className","styles","nanoid","API_KEY","BASE_URL","fetchTrendingMovies","setMovies","axios","response","data","results","log","name","message","fetchMoviesByQuery","query","setSearchedMovies","fetchMoviesById","setMovie","fetchCast","setCast","cast","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase"],"sourceRoot":""}