{"version":3,"file":"static/js/459.185ff376.chunk.js","mappings":"6OACA,EAA2B,uBAA3B,EAA6D,uBAA7D,EAA4F,oB,SCiD5F,EA3Ca,WACX,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KAMA,OAJAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,GAAUN,EAASI,GAASG,MAAMC,QAAQC,MAC3C,GAAE,CAACT,KAGF,6BACGG,EAAKO,OAAS,GACb,wBACGP,EAAKQ,KAAI,YAAwC,IAArCC,EAAoC,EAApCA,UAAWC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,aAC5B,OACE,gBAAIC,UAAWC,EAAf,UACGF,GACC,gBACEC,UAAWC,EACXC,IAAG,yCAAoCH,GACvCI,IAAG,UAAKL,MAGV,gBACEE,UAAWC,EACXC,IAAKE,EACLD,IAAK,iBAGT,4BACE,eAAIH,UAAWC,EAAf,SAAiCH,IADnC,OAEGD,QAFH,IAEGA,EAAAA,GAAa,oCAAUA,WAhBSQ,EAAAA,EAAAA,MAoBxC,OAGH,uBAAG,uCAIV,C,8LC9CKC,EAAU,mCACVC,EAAW,gCAEJC,EAAmB,mCAAG,WAAMC,GAAN,gGAERC,EAAAA,EAAAA,IAAA,UAClBH,EADkB,sCACoBD,IAHZ,cAEzBK,EAFyB,yBAKxBF,EAAUE,EAASC,KAAKC,UALA,gCAO/BpB,QAAQqB,IAAR,UAAe,KAAMhB,KAArB,aAA8B,KAAMiB,UAPL,yDAAH,sDAWnBC,EAAkB,mCAAG,WAAOC,EAAOC,GAAd,kGAEPR,EAAAA,EAAAA,IAAA,UAClBH,EADkB,gCACcD,EADd,kBAC+BW,EAD/B,+BAFO,cAExBN,EAFwB,OAKxBC,EAAOD,EAASC,KAAKC,QALG,kBAMvBK,EAAkBN,IANK,gCAQ9BnB,QAAQqB,IAAR,UAAe,KAAMhB,KAArB,aAA8B,KAAMiB,UARN,yDAAH,wDAYlBI,EAAe,mCAAG,WAAOlC,EAASmC,GAAhB,gGAEJV,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iBACDtB,EADC,oBACkBqB,IAHd,cAErBK,EAFqB,yBAKpBS,EAAST,EAASC,OALE,gCAO3BnB,QAAQqB,IAAR,UAAe,KAAMhB,KAArB,aAA8B,KAAMiB,UAPT,yDAAH,wDAWfxB,EAAS,mCAAG,WAAON,EAASI,GAAhB,gGAEEqB,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iBACDtB,EADC,4BAC0BqB,IAH5B,cAEfK,EAFe,yBAKdtB,EAAQsB,EAASC,KAAKxB,OALR,gCAOrBK,QAAQqB,IAAR,UAAe,KAAMhB,KAArB,aAA8B,KAAMiB,UAPf,yDAAH,wDAWTM,EAAY,mCAAG,WAAOpC,EAASqC,GAAhB,gGAEDZ,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iBACDtB,EADC,4BAC0BqB,IAHzB,cAElBK,EAFkB,yBAKjBW,EAAWX,EAASC,KAAKC,UALR,gCAOxBpB,QAAQqB,IAAR,UAAe,KAAMhB,KAArB,aAA8B,KAAMiB,UAPZ,yDAAH,uD,22CCjDlB,IAkBIV,EAAS,eAACkB,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACC,EAAIC,GAWvD,OARED,IAFFC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["webpack://react-homework-template/./src/pages/Cast/Cast.module.css?cfbb","pages/Cast/Cast.jsx","services/API.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"listItem\":\"Cast_listItem__2rNHA\",\"listName\":\"Cast_listName__zPyXi\",\"image\":\"Cast_image__ELqru\"};","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { fetchCast } from 'services/API';\nimport { nanoid } from 'nanoid';\nimport placeholderImage from '../../images/placeholderImage.png';\nimport styles from './Cast.module.css';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n\n  useEffect(() => {\n    fetchCast(movieId, setCast).catch(console.error);\n  }, [movieId]);\n\n  return (\n    <section>\n      {cast.length > 0 ? (\n        <ul>\n          {cast.map(({ character, name, profile_path }) => {\n            return (\n              <li className={styles.listItem} key={nanoid()}>\n                {profile_path ? (\n                  <img\n                    className={styles.image}\n                    src={`https://image.tmdb.org/t/p/w200${profile_path}`}\n                    alt={`${name}`}\n                  />\n                ) : (\n                  <img\n                    className={styles.image}\n                    src={placeholderImage}\n                    alt={'Placeholder'}\n                  />\n                )}\n                <div>\n                  <h4 className={styles.listName}>{name}</h4>\n                  {character ?? <p>{`as ${character}`}</p>}\n                </div>\n              </li>\n            );\n          })}\n        </ul>\n      ) : (\n        <p>Sorry, the cast is not available.</p>\n      )}\n    </section>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nconst API_KEY = 'ef7bbc65cde0a77a652ac5d100215648';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\nexport const fetchTrendingMovies = async setMovies => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}trending/movie/day?api_key=${API_KEY}`\n    );\n    return setMovies(response.data.results);\n  } catch (error) {\n    console.log(`${error.name}: ${error.message}`);\n  }\n};\n\nexport const fetchMoviesByQuery = async (query, setSearchedMovies) => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}search/movie?api_key=${API_KEY}&query=${query}&page=1&include_adult=true`\n    );\n    const data = response.data.results;\n    return setSearchedMovies(data);\n  } catch (error) {\n    console.log(`${error.name}: ${error.message}`);\n  }\n};\n\nexport const fetchMoviesById = async (movieId, setMovie) => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}movie/${movieId}?api_key=${API_KEY}`\n    );\n    return setMovie(response.data);\n  } catch (error) {\n    console.log(`${error.name}: ${error.message}`);\n  }\n};\n\nexport const fetchCast = async (movieId, setCast) => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}movie/${movieId}/credits?api_key=${API_KEY}`\n    );\n    return setCast(response.data.cast);\n  } catch (error) {\n    console.log(`${error.name}: ${error.message}`);\n  }\n};\n\nexport const fetchReviews = async (movieId, setReviews) => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}movie/${movieId}/reviews?api_key=${API_KEY}`\n    );\n    return setReviews(response.data.results);\n  } catch (error) {\n    console.log(`${error.name}: ${error.message}`);\n  }\n};\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["movieId","useParams","useState","cast","setCast","useEffect","fetchCast","catch","console","error","length","map","character","name","profile_path","className","styles","src","alt","placeholderImage","nanoid","API_KEY","BASE_URL","fetchTrendingMovies","setMovies","axios","response","data","results","log","message","fetchMoviesByQuery","query","setSearchedMovies","fetchMoviesById","setMovie","fetchReviews","setReviews","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase"],"sourceRoot":""}